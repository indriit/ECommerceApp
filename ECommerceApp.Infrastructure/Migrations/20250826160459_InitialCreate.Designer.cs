// <auto-generated />
using System;
using ECommerceApp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerceApp.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250826160459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("cart_id");

                    b.Property<int>("Customer_customer_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Customer_customer_id");

                    b.Property<int>("Product_product_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Product_product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("ID");

                    b.HasIndex("Customer_customer_id");

                    b.HasIndex("Product_product_id");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("ID");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("customer_id");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("phone_number");

                    b.HasKey("ID");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_id");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Customer_customer_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Customer_customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<int>("PaymentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Payment_payment_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Payment_payment_id");

                    b.Property<int>("ShipmentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Shipment_shipment_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Shipment_shipment_id");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("Customer_customer_id");

                    b.HasIndex("PaymentID");

                    b.HasIndex("Payment_payment_id");

                    b.HasIndex("ShipmentID");

                    b.HasIndex("Shipment_shipment_id");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("order_item_id");

                    b.Property<int>("Order_order_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Order_order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("Product_product_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Product_product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.HasKey("ID");

                    b.HasIndex("Order_order_id");

                    b.HasIndex("Product_product_id");

                    b.ToTable("Order_Item", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<int>("Customer_customer_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Customer_customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("Methode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("payment_method");

                    b.HasKey("ID");

                    b.HasIndex("Customer_customer_id");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("product_id");

                    b.Property<int>("Category_category_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Category_category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("Stock")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("stock");

                    b.HasKey("ID");

                    b.HasIndex("Category_category_id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Shipment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("shipment_id");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("country");

                    b.Property<int>("Customer_customer_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Customer_customer_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("shipment_date");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("zip_code");

                    b.HasKey("ID");

                    b.HasIndex("Customer_customer_id");

                    b.ToTable("Shipment", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Wishlist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("wishlist_id");

                    b.Property<int>("Customer_customer_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Customer_customer_id");

                    b.Property<int>("Product_product_id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Product_product_id");

                    b.HasKey("ID");

                    b.HasIndex("Customer_customer_id");

                    b.HasIndex("Product_product_id");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Cart", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Customer");

                    b.HasOne("ECommerceApp.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Product");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Order", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customer_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("ECommerceApp.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Domain.Entities.Payment", null)
                        .WithMany()
                        .HasForeignKey("Payment_payment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Payment");

                    b.HasOne("ECommerceApp.Domain.Entities.Shipment", "Shipment")
                        .WithMany()
                        .HasForeignKey("ShipmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerceApp.Domain.Entities.Shipment", null)
                        .WithMany()
                        .HasForeignKey("Shipment_shipment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Shipment");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("Order_order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("ECommerceApp.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Product");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Payment", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customer_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Customer");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Product", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("Customer_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shipment_Customer");
                });

            modelBuilder.Entity("ECommerceApp.Domain.Entities.Wishlist", b =>
                {
                    b.HasOne("ECommerceApp.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("Customer_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Customer");

                    b.HasOne("ECommerceApp.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Wishlist_Product");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
